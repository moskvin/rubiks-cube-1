/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. rubiks-cube.jj */
/*@egen*/

options{
  JDK_VERSION = "1.6";
  STATIC=false;
               
             
                         
                                     
  UNICODE_INPUT = false;
  JAVA_UNICODE_ESCAPE = true;
                    
}
PARSER_BEGIN(SI)
package ru.nsu.ci.translator;
import java.io.PrintStream;
import ru.nsu.ci.RubicVisitor;
import ru.nsu.ci.translator.SI;
import ru.nsu.ci.translator.ParseException;
import ru.nsu.ci.translator.TokenMgrError;
import java.io.*;
import java.nio.charset.Charset;

  public class SI/*@bgen(jjtree)*/implements SITreeConstants/*@egen*/
   {/*@bgen(jjtree)*/
  protected JJTSIState jjtree = new JJTSIState();

/*@egen*/
    	public static void main(String[] args) throws ParseException, TokenMgrError, NumberFormatException
    {
	    ByteArrayInputStream is = new ByteArrayInputStream("\u0420\u0457\u0420\u0455\u0420\u0406\u0420\u00b5\u0421\u0402\u0420\u0405\u0421\u0453\u0421\u201a\u0421\u040a; \u0420\u00b7\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0455;".getBytes());
	    SI si = new SI(is);
       // SI si=new SI(System.in);
        si.start(System.out);
        RubicVisitor visitorC = new RubicVisitor();
        si.rootNode().jjtAccept(visitorC,null);
	}
	
     public Node rootNode()
     {
       return jjtree.rootNode();
     }
   /*   public static void main(String[] args)
            throws ParseException, TokenMgrError, NumberFormatException
            {
              SI si=new SI(System.in);
              si.start(System.out);
            } */
          }
 PARSER_END(SI)
/*
 SKIP: {" "}
 TOKEN:{  <EOL: "\n" | "\r" |"\r\n" >}
 TOKEN:{  <NUMBER : (["0"-"9"])+ >}
 TOKEN:{  <POCH: "POCH" >}
 TOKEN:{  <PRCH: "PRCH" >}
 TOKEN:{  <TURN: "TURN" >}
 TOKEN:{  <LETTER: "a" | "b" | "c">}
 TOKEN:{  <MOV: "MOV" >}
 TOKEN:{  <FOR: "FOR" >}
 TOKEN:{  <END: "END" >}
 TOKEN:{  <RESTART: "RESTART">}
 TOKEN:{  <CANCEL: "CANCEL" >}
 */

 SKIP: {" "}
 TOKEN:{  <EOL: "\n" | "\r" |"\r\n" >}
 TOKEN:{  <NUMBER : (["0"-"9"])+ >}
 TOKEN:{  <POCH: "POCH" >}
 TOKEN:{  <PRCH: "PRCH" >}
 TOKEN:{  <TURN: "\u0420\u0457\u0420\u0455\u0420\u0406\u0420\u00b5\u0421\u0402\u0420\u0405\u0421\u0453\u0421\u201a\u0421\u040a" >}
 TOKEN:{  <LETTER: "a" | "b" | "c">}
 TOKEN:{  <MOV: "MOV" >}
 TOKEN:{  <FOR: "FOR" >}
 TOKEN:{  <END: "END" >}
 TOKEN:{  <RESTART: "\u0437\u0430\u043d\u043e\u0432\u043e">}
 TOKEN:{  <CANCEL: "CANCEL" >}

 

 
 void start(PrintStream printStream) throws NumberFormatException:
 {
	Token t;
 }
 {
   (
     (
       turn()
     | 
       mov()
     | 
       fore()
     | 
       cancel()
     | 
       restart()
)
<EOL>
   )*
  <EOF>
 }

 void turn() throws NumberFormatException      :
 {/*@bgen(jjtree) turn */
        ASTturn jjtn000 = new ASTturn(JJTTURN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
	String lett;
 }
 {/*@bgen(jjtree) turn */
    try {
/*@egen*/
    <TURN> 
     (
       
       (         Number() | t=<LETTER>
       {
         lett=t.image;
         jjtn000.setLett(lett);        }
      )
      
     (                
         <POCH>
       | 
         <PRCH>
     )
     
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof NumberFormatException) {
        throw (NumberFormatException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ }

 void mov() throws NumberFormatException     :
 {/*@bgen(jjtree) mov */
        ASTmov jjtn000 = new ASTmov(JJTMOV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) mov */
    try {
/*@egen*/
    <MOV>
     (       
      Number()
     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof NumberFormatException) {
        throw (NumberFormatException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ }

 void fore() throws NumberFormatException      :
 {/*@bgen(jjtree) fore */
        ASTfore jjtn000 = new ASTfore(JJTFORE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) fore */
    try {
/*@egen*/
    <FOR>
     (       
      Number()
     )
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof NumberFormatException) {
        throw (NumberFormatException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
 }


  void cancel() throws NumberFormatException        :
 {/*@bgen(jjtree) cancel */
        ASTcancel jjtn000 = new ASTcancel(JJTCANCEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) cancel */
    try {
/*@egen*/
    <CANCEL>
     (       
       Number()
     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof NumberFormatException) {
        throw (NumberFormatException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
 }

 void restart() throws NumberFormatException         :
 {/*@bgen(jjtree) restart */
        ASTrestart jjtn000 = new ASTrestart(JJTRESTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) restart */
    try {
/*@egen*/
    <RESTART>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
 }
 
 void Number ()  throws NumberFormatException      :
{/*@bgen(jjtree) temp */
  ASTtemp jjtn000 = new ASTtemp(JJTTEMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
  int num;}
{/*@bgen(jjtree) temp */
         try {
/*@egen*/         t= <NUMBER>/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
         jjtn000.jjtSetLastToken(getToken(0));
       }
/*@egen*/
       {  
         num=Integer.parseInt(t.image);
         jjtn000.setNum(num);
       }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
}