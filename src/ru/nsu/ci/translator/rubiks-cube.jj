/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. rubiks-cube.jj */
/*@egen*/options{
  STATIC=false;
               
             
                         
}
PARSER_BEGIN(SI)
package ru.nsu.ci.translator;
import java.io.PrintStream;
  public class SI/*@bgen(jjtree)*/implements SITreeConstants/*@egen*/
   {/*@bgen(jjtree)*/
  protected JJTSIState jjtree = new JJTSIState();

/*@egen*/
     public Node rootNode()
     {
       return jjtree.rootNode();
     }
   /*   public static void main(String[] args)
            throws ParseException, TokenMgrError, NumberFormatException
            {
              SI si=new SI(System.in);
              si.start(System.out);
            } */
          }
 PARSER_END(SI)

 SKIP: {" "}
 TOKEN:{  <EOL: "\n" | "\r" |"\r\n" >}
 TOKEN:{  <NUMBER : (["0"-"9"])+ >}
 TOKEN:{  <TURN: "TURN" >}
 TOKEN:{  <LETTER: "a" | "b" | "c">}
 TOKEN:{  <MOV: "MOV" >}
 TOKEN:{  <FOR: "FOR" >}
 TOKEN:{  <END: "END" >}
 TOKEN:{  <RESTART: "RESTART">}
 TOKEN:{  <CANCEL: "CANCEL" >}

 /*TOKEN:{  <EOL: "\n" | "\r" |"\r\n" >}
 TOKEN:{  <NUMBER : (["0"-"9"])+ >}
 TOKEN:{  <TURN: "\u0420\u0457\u0420\u0455\u0420\u0406\u0420\u00b5\u0421\u0402\u0420\u0405\u0421\u0453\u0421\u201a\u0421\u040a" ( < NUMBER> | < LETTER > )  < NUMBER> >}
 TOKEN:{  <LETTER: "\u0420\u00b0" | "\u0420\u00b1" | "\u0420\u0406">}
 TOKEN:{  <MOV: "\u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u2116\u0421\u201a\u0420\u0451" < NUMBER > >}
 TOKEN:{  <FOR: "\u0420\u0457\u0420\u0455\u0420\u0406\u0421\u201a\u0420\u0455\u0421\u0402\u0420\u0451\u0421\u201a\u0421\u040a" < NUMBER > >}
 TOKEN:{  <END: "\u0420\u0454\u0420\u0455\u0420\u0405\u0420\u00b5\u0421\u2020" >}
 TOKEN:{  <RESTART: "\u0420\u00b7\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0455">}
 TOKEN:{  <CANCEL: "\u0420\u0455\u0421\u201a\u0420\u0458\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u201a\u0421\u040a" < NUMBER > >}*/
 

 
 void start(PrintStream printStream) throws NumberFormatException:
 {
	Token t;
 }
 {
   (
     (
       turn()
     | 
       mov()
     | 
       fore()
     | 
       cancel()
     | 
       restart()
)
<EOL>
   )*
  <EOF>
 }

 void turn() throws NumberFormatException      :
 {/*@bgen(jjtree) turn */
        ASTturn jjtn000 = new ASTturn(JJTTURN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) turn */
    try {
/*@egen*/
    <TURN> 
     (
       < NUMBER > | < LETTER > <NUMBER> 
     )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ }

 void mov() throws NumberFormatException     :
 {/*@bgen(jjtree) mov */
        ASTmov jjtn000 = new ASTmov(JJTMOV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) mov */
    try {
/*@egen*/
    <MOV>
     (       
       < NUMBER >
     )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ }

 void fore() throws NumberFormatException      :
 {/*@bgen(jjtree) fore */
        ASTfore jjtn000 = new ASTfore(JJTFORE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) fore */
    try {
/*@egen*/
    <FOR>
     (       
       < NUMBER >
     )
    <END>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
 }


  void cancel() throws NumberFormatException        :
 {/*@bgen(jjtree) cancel */
        ASTcancel jjtn000 = new ASTcancel(JJTCANCEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) cancel */
    try {
/*@egen*/
    <CANCEL>
     (       
       < NUMBER >
     )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
 }

 void restart() throws NumberFormatException         :
 {/*@bgen(jjtree) restart */
        ASTrestart jjtn000 = new ASTrestart(JJTRESTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) restart */
    try {
/*@egen*/
    <RESTART>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
 }